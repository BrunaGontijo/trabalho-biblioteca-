from tkinter import messagebox, ttk
import mysql.connector
from mysql.connector import Error
import tkinter as tk
# Função para criar conexão com o banco de dados
def carregar_livros(idlivros,nome,autor,genero,idioma,localização,status):
    
    conn= mysql.connector.connect(
        host='localhost',
        user='root',
        password='acesso123',
        database='bibilioteca',

    )
    cursor= conn.cursor()
    cursor.execute('INSERT INTO livros(idlivros,nome,autor,genero,idioma,localização,status) VALUES(%s,%s,%s,%s,%s,%s,%s)', 
    (idlivros, nome,autor,genero,idioma,localização,status))
    conn.commit()
    conn.close()
    if conn:
        try:
            cursor = conexao.cursor()
            cursor.execute("SELECT * FROM livros")  # Alterado para a tabela correta 'livros'
            for row in cursor.fetchall():
                tree_livros.insert("", tk.END, values=row)  # Insere os dados na tabela
            cursor.close()
        except Error as e:
            messagebox.showerror("Erro", f"Erro ao carregar os livros: {e}")
        finally:
      
          conn.close()
def main_menu(): 
       global root
       root = tk.Tk()
       root.title('feira de livros')
       root.geometry("700x700")

# janela livros

class adicionar_livros:
    def __init__(self, conn):
      self.conn = conn 
      self.cursor = conn.cursor()
    def adicionar_livros(self,idlivros,nome,autor,genero,idioma,localização,status):
         try:
            # excuta consulta de inserção 
            self.cursor.execute("INSERT INTO livros(idlivros,nome,autor,genero,idioma,localização,status) VALUES (%s, %s, %s,%s,%s,%s,%s,%s)", (idlivros,nome, autor, genero,idioma, localização, status))
            self.conn.commit()
            print('livro adicionado com sucesso!')
         except mysql.connector.Error as err:
            print(f'erro ao adicionar livro:{err}')
         finally:
          self.fechar_conexao
    def fechar_conexao(self):
               # não feche a conexão pois pode ser reutilizada
                  self.cursor.close()
                  self.conn.close()
                  
                 
                         
class salvar_livros:
     def __init__(self,conn):
        self.conn = conn 
        self.cursor = conn.cursor()
     def salvar_livros(self,nome,autor,genero, idlivros,idioma,localização,status):
        try:
         self.cursor.execute(("INSERT INTO livros (nome,autor,genero,idlivros,idioma,localização,status) VALUES (%s, %s, %s,%s,%s,%s,%s)", (nome,autor,genero,idlivros,idioma,localização,status)))
         self.coon.commit()
         messagebox.showerror('Error', f'error ao salvar os livros{err}')
        except mysql.connector.Error as err: 
            print(f'error ao adicionar livro:{err}')
        finally:
           self.fechar_conexao
     def fechar_conexao(self):
         self.cursor.close()
         self.conn.close()

class editar_livros:
    def __init__(self, conn):
        self.conn = conn
        self.cursor = conn.cursor()


    def editar_livros(self, nome, autor, genero,idlivros,idioma,localização,status):
        try:

          self.cursor.execute("UPDATE livros SET nome=%s, autor=%s, genero=%s,idlivros=%s,idioma=%s,localização=%s,status=%s WHERE idlivros=%s")
          (nome,autor,genero,idlivros,idioma,localização,status,idlivros)
          self.conn.commit()
          messagebox.showerror('livro autalizado com sucesso')
        except mysql.connector.Error as err: 
          messagebox.showerror(f'erro ao editar livro:{err}')



class excluir_livros:
   def __init__(self, conn):
       self.conn = conn
       self.cursor = conn.cursor()
    
   
def excluir(self, nome, autor, genero,idlivros,idioma,localização,status):
       try:
           self.cursor.excute("DELETE FROM livros WHERE  idlivros=%s", (idlivros))
           self.conn.commit()
       except mysql.connector.Error as err:
           messagebox.showerror(f'error ao excluir livro:{err}')
       
       self.cursor.execute("DELETE FROM livros nome=%s, autor=%s, genero=%s,idlivros=%s,idioma=%s,localização=%s,status=%s WHERE idlivros=%s") (nome,autor,genero,idlivros,idioma,localização,status,idlivros)
      
       messagebox.showerror(f'error ao excluir livro:{err}')
       self.conn.commit()

# interface 
def main_menu(): 
       global root
       root = tk.Tk()
       root.title('feira de livros')
       root.geometry("700x700")

# janela livros
root= tk.Tk()
root.title('adicionar livros')
root.geometry("700x700")
text = tk.Label(root, width=130,)
# entrada nome
text.grid()
Nomelabel = tk.Label(root, text="Nome")
Nomelabel.grid()
Nomeentry=tk.Entry(root, width=30)
Nomeentry.grid()
Nomeentry.grid()

# entrada autor

autorlabel=tk.Label (root, text="Autor")
autorlabel.grid()
autorentry = tk.Entry(root,text="Autor")
autorentry.grid()

# entrada telefone 

generolabel=tk.Label(root, text="genero")
generolabel.grid()
generoEntry=tk.Entry(root, text="genero")
generoEntry.grid()

# data 
idiomalabel=tk.Label(root, text="idioma")
idiomalabel.grid()
idiomaEntry=tk.Entry(root, text="idioma")
idiomaEntry.grid()

# entrada endereco

localizaçãolabel=tk.Label (root, text="localizacao")
localizaçãolabel.grid()
localizaçãoentry = tk.Entry(root,text="localizacao")
localizaçãoentry.grid()


# entrada telefone 

statuslabel=tk.Label(root, text="status")
statuslabel.grid( )
statusEntry=tk.Entry(root, text="status")
statusEntry.grid()

# data 
idlivroslabel=tk.Label(root, text="idlivros")
idlivroslabel.grid()
idlivrosEntry=tk.Entry(root, text="idlivros")
idlivrosEntry.grid()
# meus  botões 
class MeusBotoes:
    
    def __init__(self,root):
        self.root = root
        btn_adicionar_livro = ttk.Button(root, text="Adicionar Livro",
                                         command=lambda: self.adicionar_livro)
        btn_adicionar_livro.grid(row=80,pady=90)

        def adicionar_livro(self):
            # obter dados das entradas 
            Nome=self.NomeEntry.get()
            autor=self.autorEntry.get()
            genero=self.generoEntry.get()
            idioma=self.idiomaEntry.get()
            localização=self.localização.get()
            status=self.status.get()
            idlivros=self.idlivros.get()
            if not all ([Nome,autor,genero,localização,status,idlivros]):
               messagebox.showerror("Aviso, todos campos devem ser preenchidos")
               return
            try:
                cursor=self.conn.cursor()
                cursor.excute("INSERT INTO livros(idlivros,autor,genero,idioma,localizacao,status)"
                              )
                self.conn.commit()
                messagebox.showinfo('adicionado com sucesso')
            except mysql.connector.Error as err:
                messagebox.showerror("erro", f"erro ao adicionar_livro:{err}")
            finally:
                cursor.close()
                if self.coon.close():
                # Iniciar aplicação 
                  if "__name__":
                    root= tk.Tk()
                    root.title('feira do livro')
                    root.geometry('700x700')


            


    
 

        

root.mainloop()

