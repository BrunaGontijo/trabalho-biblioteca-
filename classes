from tkinter import messagebox, ttk
import mysql.connector
from mysql.connector import Error
import tkinter as tk
# Função para criar conexão com o banco de dados
def carregar_livros(idlivros,nome,autor,genero,idioma,localizacao,status):
    
    conn= mysql.connector.connect(
        host='localhost',
        user='root',
        password='acesso123',
        database='bibilioteca',

    )
    cursor= conn.cursor()
    cursor.execute('INSERT INTO livros(idlivros,nome,autor,genero,idioma,localizacao,status) VALUES(%s,%s,%s,%s,%s,%s,%s)', 
    (idlivros, nome,autor,genero,idioma,localizacao,status))
    conn.commit()
    conn.close()
    if conn:
        try:
            cursor = conexao.cursor()
            cursor.execute("SELECT * FROM livros")  # Alterado para a tabela correta 'livros'
            for row in cursor.fetchall():
                tree_livros.insert("", tk.END, values=row)  # Insere os dados na tabela
            cursor.close()
        except Error as e:
            messagebox.showerror("Erro", f"Erro ao carregar os livros: {e}")
        finally:
      
          conn.close()
def main_menu(): 
       global root
       root = tk.Tk()
       root.title('feira de livros')
       root.geometry("700x700")
# janela livros

   



class adicionar_livros:
    def __init__(self, conn, titulo,autor,genero):
      self.conn = conn 
      self.cursor=conn.cursor()
      def adicionar_livros(self,idlivro,nome,autor,genero,idioma,localizacao,status):
         try:
            # excuta consulta de inserção 
            self.cursor.execute("INSERT INTO livros(titulo,autor,genero) VALUES (%s, %s, %s)", (titulo, autor, genero))
            self.conn.commit()
            print('livro adicionado com sucesso!')
            self.conn.commit()
         except mysql.connector.Error as err:
            print(f'erro ao adicionar livro:{err}')
         finally:
            def  fechar_conexao(self):
               # não feche a conexão pois pode ser reutilizada
                  self.cursor.close()
                  self.conn.close()
                 
                         
class salvar_livros:
 def salvar (self,titulo,autor,genero):
    def __init__(self,conn,titulo,autor,genero):
        self.conn = conn 
        self.cursor = conn.cursor()
        print('livro salvo com sucesso!')
        self.coon.commit()
    cursor.execute("INSERT INTO livros (titulo, autor, genero) VALUES (%s, %s, %s)", (titulo, autor, genero))
    self.conn.commit()
    salvar_livros()
    

class editar_livros:
   def editar_livros(titulo, autor, genero):
       cursor.execute("UPDATE livros (titulo, autor, genero) VALUES (%s, %s, %s)", (titulo, autor, genero))
       self.conn.commit()
       editar_livros()

class excluir_livros:
   def excluir_livros(titulo,autor,genero):
       cursor.execute("DELETE FROM livros (titulo, autor, genero) VALUES (%s, %s, %s)", (titulo, autor, genero))
       self.conn.commit()
       excluir_livros()

      
    
 

        

root.mainloop()

